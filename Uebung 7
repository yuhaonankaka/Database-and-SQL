with mehr_pruefen(MatrNr,VorlNr,PersNr,Note) as (
select * from pruefen
union
values (28106,5041,2137,3.0)
)
create table hoerentotal (vtitel varchar(30), pname varchar(30),
sname varchar(30), all integer);
insert into hoerentotal(
select v.titel as VTitel, p.Name as PName, s.Name as SName,
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
group by cube(v.titel, p.Name, s.Name)
);




create table hoerentotal (vtitel varchar(30), pname varchar(30),
sname varchar(30), all integer);
insert into hoerentotal(
select null as VTitel, null as PName, null as SName,
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
-- keine Gruppierung
UNION
select null, null, s.Name as SName,
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
group by s.Name
UNION
select null, p.Name as PName, null,
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
group by p.Name
UNION
select null, p.Name as PName, s.Name as SName,
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
group by p.Name, s.Name
UNION
select v.titel as VTitel, null, null
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
group by v.titel
UNION
select v.titel as VTitel, null, s.Name as SName,
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
group by v.titel, s.Name
UNION
select v.titel as VTitel, p.Name as PName, null,
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
group by v.titel, p.Name
UNION
select v.titel as VTitel, p.Name as PName, s.Name as SName,
count(*) as all
from mehr_pruefen pr, Vorlesungen v, Professoren p, Studenten s
where p.PersNr = pr.PersNr AND s.MatrNr=pr.MatrNr AND v.VorlNr=pr.VorlNr
group by v.titel, p.Name, s.Name
); 






select p.Produkttype, f.Bezirk, k.wiealt, sum(v.Anzahl)
from Verkaueufe v, Produkte p, Filialen f, Kunden k, Zeit z
where v.Produkt=p.ProduktNr and v.Kunde = k. KundenNr
and v.Filiale=f.Filialenkennung and v.VerkDatum=z.Datum
and z.Saison="Hochsommer" and f.Land="D"
group by cube(p.Produkttype, f.Bezirk, k.wiealt)






with Professoren (persnr, name, rang, raum, gehalt, steuerklasse) as (
values (2125,'Sokrates','C4',226,85000,1) UNION
values (2126,'Russel','C4',232,80000,3) UNION
values (2127,'Kopernikus','C3',310,65000,5) UNION
values (2128,'Aristoteles','C4',250,85000,1) UNION
values (2133,'Popper','C3',52,68000,1) UNION
values (2134,'Augustinus','C3',309,55000,5) UNION
values (2136,'Curie','C4',36,95000,3) UNION
values (2137,'Kant','C4',7,98000,1)
)

select *,avg(gehalt)over() FROM Professoren;

SELECT *, avg(gehalt) OVER (PARTITION BY rang) FROM Professoren;

SELECT *, sum(gehalt) OVER (PARTITION BY rang ORDER BY gehalt DESC
RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM Professoren;

SELECT *, sum(gehalt) OVER (PARTITION BY rang ORDER BY gehalt DESC
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) FROM Professoren;

SELECT *, avg(gehalt) OVER (PARTITION BY rang ORDER BY gehalt DESC
ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) FROM Professoren;

SELECT *, avg(gehalt) OVER (PARTITION BY rang ORDER BY gehalt DESC
RANGE BETWEEN 500 PRECEDING AND 500 FOLLOWING) FROM Professoren;

SELECT *, lag(gehalt) OVER (ORDER BY gehalt DESC),
lead(gehalt) OVER (ORDER BY gehalt DESC) FROM Professoren;


SELECT * FROM (
SELECT *, rank() OVER (ORDER BY gehalt desc) FROM Professoren
) WHERE rank < 4

SELECT * FROM professoren p_selbst WHERE 3>(SELECT count(*)
FROM professoren p_reich WHERE p_selbst.gehalt < p_reich.gehalt)




with mehr_pruefen ( MatrNr , VorlNr , PersNr , Note ) as (
select * from pruefen
union
values (29120 ,0 ,0 ,3.0) , (29555 ,0 ,0 ,2.0) , (29555 ,0 ,0 ,1.3) , (29555 ,0 ,0 ,1.0)
)


#Ohne Windowfunktionen:
with mehr_pruefen ( MatrNr , VorlNr , PersNr , Note ) as (
select * from pruefen
union
values (29120 ,0 ,0 ,3.0) , (29555 ,0 ,0 ,2.0) , (29555 ,0 ,0 ,1.3) , (29555 ,0 ,0 ,1.0)
),
noten ( MatrNr , Semester , Note ) as (
select s.matrnr , semester , avg ( Note )
from studenten s, mehr_pruefen p
where s. matrnr =p. matrnr
group by s. matrnr , semester
)
select *,
( select count (*)+1 from noten x
where x. Semester =n. Semester and x.Note <n. Note ) as Rang ,
( select avg(x. Note ) from noten x
where x. Semester =n. Semester ) as GPA ,
( select avg(x. Note ) from noten x
where x. Semester =n. Semester ) - note as Abweichung
from noten n order by semester , rang



#Mit Windowfunktionen:
with mehr_pruefen ( MatrNr , VorlNr , PersNr , Note ) as (
select * from pruefen
union
values (29120 ,0 ,0 ,3.0) , (29555 ,0 ,0 ,2.0) , (29555 ,0 ,0 ,1.3) , (29555 ,0 ,0 ,1.0)
),
noten ( MatrNr , Semester , Note ) as (
select s.matrnr , semester , avg ( Note )
from studenten s, mehr_pruefen p
where s. matrnr =p. matrnr
group by s. matrnr , semester
)
select *,
rank () over ( partition by Semester order by Note asc ) as Rang ,
avg ( Note ) over ( partition by Semester ) as GPA ,
avg ( Note ) over ( partition by Semester ) - note as Abweichung
from noten order by semester , rang







select
supp_nation ,
cust_nation ,
l_year ,
sum ( volume ) as revenue
from
(
select
n1. n_name as supp_nation ,
n2. n_name as cust_nation ,
extract ( year from l_shipdate ) as l_year ,
l_extendedprice * (1 - l_discount ) as volume
from
supplier ,
lineitem ,
orders ,
customer ,
nation n1 ,
nation n2
where
s_suppkey = l_suppkey
and o_orderkey = l_orderkey
and c_custkey = o_custkey
and s_nationkey = n1. n_nationkey
and c_nationkey = n2. n_nationkey
and (
(n1. n_name = ’UNITED STATES ’ and n2. n_name = ’GERMANY ’)
or (n1. n_name = ’GERMANY ’ and n2. n_name = ’UNITED STATES ’)
)
and l_shipdate between date ’1995 -01 -01 ’ and date ’1996 -12 -31 ’
) as shipping
p by
supp_nation ,
cust_nation ,
l_year
order by
supp_nation ,
cust_nation ,
l_year
